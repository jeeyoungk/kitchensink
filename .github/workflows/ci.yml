name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: "Install dependencies"
        id: install
        run: bun install --frozen-lockfile
      - name: "Check code formatting"
        if: steps.install.conclusion == 'success'
        run: bun run check:format
      - name: "Run linting"
        if: steps.install.conclusion == 'success'
        run: bun run check:lint
      - name: "Run type checking"
        if: steps.install.conclusion == 'success'
        run: bun run test:type
      - name: "Run tests"
        if: steps.install.conclusion == 'success'
        run: bun test
      - name: "Build"
        if: steps.install.conclusion == 'success'
        run: bun run build
      - name: "Run Documentation"
        if: steps.install.conclusion == 'success'
        run: bun run docs

  release:
    needs: test
    runs-on: ubuntu-latest
    # disable release, unless explicitly enabled
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      id-token: write
      issues: write
      pull-requests: write
      pages: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - name: "Install dependencies"
        run: bun install --frozen-lockfile
      - name: "Build"
        run: bun run build
      - name: "Release"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: bun run release
      - name: Release and Publish
        id: semantic_release
        run: |
          # Store git HEAD before semantic-release
          BEFORE_SHA=$(git rev-parse HEAD)
          echo "before_sha=$BEFORE_SHA" >> $GITHUB_OUTPUT

          # Run semantic-release
          bun run semantic-release

          # Check if semantic-release created a new commit (indicating a release)
          AFTER_SHA=$(git rev-parse HEAD)
          if [ "$BEFORE_SHA" != "$AFTER_SHA" ]; then
            echo "new_release=true" >> $GITHUB_OUTPUT
            echo "latest_tag=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT
          else
            echo "new_release=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Generate documentation
        if: always() && steps.semantic_release.outputs.new_release == 'true'
        run: bun run docs
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        if: always() && steps.semantic_release.outputs.new_release == 'true'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
